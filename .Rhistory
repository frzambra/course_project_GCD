breaks<-c(0,1,5,7,9,10,11,12,13,15,16)
lc.cut<-cut(lc[[13]],breaks,include.lowest=TRUE)
library(XML)
fileUrl<-"http://www.w3schools.com/xml/simple.xml"
doc<-xmlTreeParse(fileUrl,useInternal=TRUE)
rootNode<- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode
doc
xmlName(rootNode)
names(rootNode)
rootNode
tootNode[[1]]
rootNode[[1]]
rootNode[[1]][[1]]
rootNode[[1]][[2]]
xmlSApply(rootNode,xmlValue)
class(xmlSApply(rootNode,xmlValue))
rootNode
xmlValue
xmlSApply(rootNode,xmlValue)
dim(xmlSApply(rootNode,xmlValue))
length(xmlSApply(rootNode,xmlValue))
xmlSApply(rootNode,xmlValue)[1]
rootNode
xpathSApply(rootNode,"//name",xmlValue)
xpathSApply(rootNode,"//price",xmlValue)
fileUrl <- "http://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
doc <- htmlTreeParse(fileUrl,useInternal=TRUE)
doc
scores <- xpathSApply(doc,"//li[@class='score']",xmlValue)
scores
fileUrl <- "http://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
doc <- htmlTreeParse(fileUrl,useInternal=TRUE)
scores <- xpathSApply(doc,"//li[@class='score']",xmlValue)
scores
teams <- xpathSApply(doc,"//li[@class='team-name']",xmlValue)
teams
ranking <- xpathSApply(doc,"//li[@class='ranking']",xmlValue)
ranking
library(RMySQl)
install.packages("RMySQl")
install.packages("RMySQL")
library(RMySQL)
ucscDb <- dbConnect(MySQL(), user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show database;"); dbDisconnect(ucscDb)
ucscDb <- dbConnect(MySQL(), user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show database;"); dbDisconnect(ucscDb)
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb)
result
hg19 <- dbConnect(MySQL(),user="genome",db="hg19",
host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
allTables
length(allTables)
allTables[1:5]
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyData)
query <- dbSendQuery(hg19,"select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)
affyMisSmall <- fetch(query,n=10); dbClearResult(query);
dbDisconnect(hg19)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
close(con)
htmlCode
library(XML)
url<-"http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=T)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
library(httr)
html2 <- GET(url)
html2
content2 <- content(html2, as="text")
content2
parsedHtml = htmlParse(content2, asText=TRUE)
parsedHtml
xpathSApply(parsedHtml,"//title",xmlValue)
pg2 = GET(url,authenticate("user","passwd"))
pg2
names(pg2)
google = handle("http://google.com")
pg1= GET(handle=google,path='/')
pg1
pg2= GET(handle=google,path='search')
pg2
require('sendmailR')
install.packages("sendmailR")
library(sendmailR)
sendmail("<francisco.zambrano@inia.com>",
"<frzambra@gmail.com>",
"Recuperación clave IDE MINAGRI",
msg="Estimado te escribo para solicitar la recuperación de mi clave de la IDE",
control=list(smtpServer="ASPMX.L.GOOGLE.COM"))
?sendmail
sendmail("<francisco.zambrano@inia.com>",
"<frzambra@gmail.com>",
"Recuperación clave IDE MINAGRI",
msg=list("Estimado te escribo para solicitar la recuperación de mi clave de la IDE"),
control=list(smtpServer="ASPMX.L.GOOGLE.COM"))
sendmail("<francisco.zambrano@inia.com>",
"<frzambra@gmail.com>",
"Recuperación clave IDE MINAGRI",
body=list("Estimado te escribo para solicitar la recuperación de mi clave de la IDE"),
control=list(smtpServer="ASPMX.L.GOOGLE.COM"))
sendmail("<francisco.zambrano@inia.com>",
"<frzambra@gmail.com>",
"Recuperación clave IDE MINAGRI",
body=list("Estimado te escribo para solicitar la recuperación de mi clave de la IDE"),
control=list(smtpServer="ASPMX.L.GOOGLE.COM"))
sendmail("<francisco.zambrano@inia.com>",
"<frzambra@gmail.com>",
"Recuperación clave IDE MINAGRI",
msg=list("Estimado te escribo para solicitar la recuperación de mi clave de la IDE"),
control=list(smtpServer="ASPMX.L.GOOGLE.COM"))
sendmail("<francisco.zambrano@inia.com>",
"<frzambra@gmail.com>",
"Recuperación clave IDE MINAGRI",
smtp = list(host.name = "smtp.gmail.com", port = 465,
user.name="frzambra@gmail.com", passwd="7|26%Fr!", ssl=TRUE),
authenticate = TRUE,
msg=list("Estimado te escribo para solicitar la recuperación de mi clave de la IDE"),
)
sendmail("<francisco.zambrano@inia.com>",
"<frzambra@gmail.com>",
"Recuperación clave IDE MINAGRI",
msg="Estimado te escribo para solicitar la recuperación de mi clave de la IDE",
control=list(smtpServer="ASPMX.L.GOOGLE.COM"))
sendmail("<francisco.zambrano@inia.com>",
"<frzambra@gmail.com>",
"Recuperación clave IDE MINAGRI",
msg="Estimado te escribo para solicitar la recuperación de mi clave de la IDE",
control=list(smtpServer="ASPMX.L.GOOGLE.COM"))
from <- sprintf("<sendmailR@\%s>", Sys.info()[4])
to <- "<frzambra@gmail.com>"
subject <- "Hello from R"
body <- list("It works!", mime_part(iris))
sendmail(from, to, subject, body,
control=list(smtpServer="ASPMX.L.GOOGLE.COM"))
from <- sprintf("<sendmailR@\%s>", Sys.info()[4])
to <- "<frzambra@gmail.com>"
subject <- "Hello from R"
body <- list("It works!", mime_part(iris))
sendmail(from, to, subject, body,
control=list(smtpServer="ASPMX.L.GOOGLE.COM"))
from <- sprintf("<sendmailR@\%s>", Sys.info()[4])
sprintf("<sendmailR@\%s>", Sys.info()[4])
sprintf("<sendmailR@\%s>", Sys.info()[4])
from <- sprintf("<sendmailR@prueba>", Sys.info()[4])
from
to <- "<frzambra@gmail.com>"
subject <- "Hello from R"
body <- list("It works!", mime_part(iris))
sendmail(from, to, subject, body,
control=list(smtpServer="ASPMX.L.GOOGLE.COM"))
sendmail(from, to, subject, body,
control=list(smtpServer="ASPMX.L.GOOGLE.COM."))
install.packages("rvest")
library(rvest)
lego_movie <- html("http://www.imdb.com/title/tt1490017/")
lego_movie
?html
rvest
html
lego_movie %>%
html_node("strong span")
lego_movie %>%
html_node()
lego_movie %>%
html_node("strong span") %>%
html_text() %>%
as.numeric()
lego_movie %>%
html_node("span") %>%
html_text() %>%
as.numeric()
lego_movie %>%
html_node("span") %>%
html_text()
lego_movie %>%
html_node("a span") %>%
html_text()
lego_movie %>%
html_node(".star-box-giga-star , span") %>%
html_text()
lego_movie %>%
html_node(".star-box-giga-star , span") %>%
html_text()
lego_movie %>%
html_node(".itemprop") %>%
html_text()
lego_movie %>%
html_node(".infobar , .itemprop") %>%
html_text()
lego_movie %>%
html_node(".odd:nth-child(6) .itemprop , .even~ .even .itemprop , .odd:nth-child(2) .itemprop") %>%
html_text()
lego_movie %>%
html_node("h3") %>%
html_text()
lego_movie %>%
html_node("p") %>%
html_text()
lego_movie %>%
html_node("div p") %>%
html_text()
lego_movie %>%
html_node("div p")
set.seed(13435)
X <- data.frame("var1"=sample(1:5),"var2"=sample(6:10),"var3"=sample(11:15))
X
X[sampe(1:5),]
X[sample(1:5),]
X$var2[c(1,3)]
X <- X[sample(1:5),];X$var2[c(1,3)]=NA
X
X[,1]
X[],"var1"]
X[,"var1"]
X[1:2,"var2"]
X[(X$var1 <= & X$var3 >11),]
X[(X$var1 <= 3 & X$var3 >11),]
X[(X$var1 <= 3 | x$var3 > 15),]
X[(X$var1 <= 3 | X$var3 > 15),]
X[which(X$var2 > 8),]
sort(X$var1)
sort(X$var1,decreasing=TRUE)
sort(X$var2,na.last=TRUE)
sort(X$var1)
sort(X$var2,na.last=TRUE)
sort(X$var2,na.last=TRUE)
sort(X$var2)
X[order(X$var1),]
X[order(X$var1,x$var3),]
X[order(X$var1,X$var3),]
library(plyr)
arrange(X,var1)
arrange(X,desc(var1))
X$var4 <- rnorm(5)
X
Y <- cbind(X, rnorm(5))
Y
fileUrl <- "https://data.baltimorecity.gv/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://data.baltimorecity.gv/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/restaurants.csv",method="curl")
restData <- read.csv("./data/restaurants.csv")
download.file(fileUrl,destfile="./data/restaurants.csv",method="wget")
fileUrl <- "http://data.baltimorecity.gv/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/restaurants.csv",method="wget")
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/restaurants.csv",method="wget")
download.file(fileUrl,destfile="./data/restaurants.csv",method="curl")
download.file(fileUrl,destfile="./data/restaurants.csv",method="auto")
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/restaurants.csv",method="auto")
download.file(fileUrl,destfile="./data/restaurants.csv",method="wget")
download.file(fileUrl,destfile="./data/restaurants.csv",method="auto")
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/restaurants.csv",method="auto")
list.files()
list.files(data)
list.files("data")
restData <- read.csv("./data/restaurants.csv")
download.file(fileUrl,destfile="./data/restaurants.csv",method="curl")
?download.file
download.file(fileUrl,destfile="./data/restaurants.csv",method="cur1")
download.file(fileUrl,destfile="./data/restaurants.csv",method="curl")
download.file(fileUrl,destfile="./data/restaurants.csv",method="curl")
download.file(fileUrl,destfile="./data/restaurants.csv",method="wget")
restData <- read.csv("./data/restaurants.csv")
head(restData)
summary(restData)
str(restData
)
quantile(restData$councilDistrict,na.rm=TRUE)
quantile(restData$councilDistrict,probs=c(0.5,0.75.0.9),na.rm=TRUE)
quantile(restData$councilDistrict,probs=c(0.5,0.75,0.9),na.rm=TRUE)
table(restData$zipCode,useNA='ifany')
table(restData$councilDistrict,restData$zipCode)
sum(is.na(restData$councilDistrict))
any(is.na(restData$councilDistrict))
all(restData$zipCode > 0)
colSums(is.na(restData))
all(colSums(is.na(restData))==0)
table(restData$zipCode %in% c("21212"))
table(restData$zipCode %in% c("21212","21213"))
restData[restData$zipCode %in% c("21212","21213")]
restData[restData$zipCode %in% c("21212","21213"),]
data(UCBAdmissions)
DF = as.data.frame(UCBAdmissions)
summary(DF)
xt <- xtabs(Freq~Gender + Admit, data=DF)
xt
head(DF)
warpbreaks$replicate <- rep(1:9, len=54)
xt <- xtabs(breaks~.,data=warpbreaks)
xt
warpbreaks
ftable(xt)
xt
class(xt)
fakeData = rnorm(1e5)
object.size(fakeData)
print(object.size(fakeData),units="Mb")
restData <- read.csv("./data/restaurants.csv")
s1 <- seq(1,10,by=2); s1
s2 <- seq(1,10,length=3); s2
x <- c(1,3,8,25,100); seq(along=x)
x
restData$nearMe = restData$neighborhood %in% c("Roland Park", "Homeland")
table(restData$nearMe)
restData$zipWrong = ifelse(restData$zipCode < 0, TRUE, FALSE)
table(restData$zipWrong)
table(restData$zipWrong,restData$zipCode)
table(restData$zipWrong,restData$zipCode < 0)
restData
table(restData$zipWrong)
restData$zipGroups = cut(restData$zipCode, breaks=quantile(restData$zipCode))
restData$zipGroups
table(restData$zipGroups,restData$zipCode)
library(Hmisc)
install.packages(Hmisc)
install.packages("Hmisc")
library(Hmisc)
library(Hmisc)tData$zipGroups = cut2(restData$zipCode,g=4)
restData$zipGroups = cut2(restData$zipCode,g=4)
table(restData$zipGroups)
restData$zcf <- factor(restData$zipCode)
restData$zcf
restData$zcf[1:10]
class(restData$zcf)
yesno <- sample(c("yes","no"),size=10,replace=TRUE)
yesnofact = factor(yesno, levels=c("yes","no"))
yesno
yesnofact
relevel(yesnofac,ref="yes")
relevel(yesnofact,ref="yes")
?relevel
as.numeric(yesnofact)
yesno
yesnofact
levels(yesnofact)
levels(yesnofact)=="yes"
yesnofact[levels(yesnofact)=="yes"]<-"uno"
yesnofact[levels(yesnofact)=="yes"]
yesnofact
e
yesno <- sample(c("yes","no"),size=10,replace=TRUE)
yesnofact = factor(yesno, levels=c("yes","no"))
yesnofact
yesnofact[levels(yesnofact)=="yes"]
yesnofact[levels(yesnofact)=="yes"]<-'uno'
yesnofact
yesno <- sample(c("yes","no"),size=10,replace=TRUE)
yesnofact = factor(yesno, levels=c("yes","no"))
yesnofact[levels(yesnofact)=="yes"]<-factor('uno')
levels(yesnofact)[levels(yesnofact)=="yes"] <- "uno"
yesnofact
yesno <- sample(c("yes","no"),size=10,replace=TRUE)
yesnofact = factor(yesno, levels=c("yes","no"))
yesnofact
levels(yesnofact)[levels(yesnofact)=="yes"] <- "uno"
yesnofact
library(Hmisc)
library(plyr)
restData2 = mutate(restData, zipGroups=cut2(zipCode,g=4))
library(Hmisc)
rm(list=ls())
setwd('~/coursera/Getting_and_Cleaning_Data/course_project')
list.files()
library(data.table)
xtrain <- read.table('Data/train/X_train.txt')
feat <- read.table("Data/features.txt")
ytrain <- read.table('Data/train/y_train.txt')
subtrain <- read.table('Data/train/subject_train.txt')
actlabels <- read.table('Data/activity_labels.txt')
ind<-c(grep("mean()",feat[,2]),grep("std()",feat[,2]))
gsub("-std\\()-","STD",feat[ind,2])
gsub("-std\\()","STD",feat[ind,2])
labvar<-gsub("-std\\()","STD",feat[ind,2])
gsub("tBody","tB",labvar)
labvar <- gsub("tBody","tB",labvar)
labvar
ind
feat[ind,2]
length(feat[ind,2])
ind[,2]
feat[,2]
ind
feat[ind,2]
length(feat[ind,2])
ind <- c(grep("mean\\()",feat[,2]),grep("std\\()",feat[,2]))
feat[ind,2]
length(ind)
feat[ind,2]
labvar <- feat[ind,2]
gsub("Body","B",labvar)
labvar <- gsub("Body","B",labvar)
labvar <- gsub("Gyro","G",labvar)
labvar
labvar <- gsub("Gravity","G",labvar)
labvar
labvar <- gsub("Acc","A",labvar)
labvar <- gsub("Jerk","J",labvar)
labvar <- gsub("Mag","M",labvar)
labvar
gsub("-std\\()","STD",labvar)
gsub("-std\\()","_std",labvar)
feat[ind,2]
labvar <- feat[ind,2]
labvar
labvar <- gsub("Body","B",labvar)
labvar <- gsub("Gyro","G",labvar)
labvar <- gsub("Gravity","G",labvar)
labvar <- gsub("Acc","A",labvar)
labvar <- gsub("Jerk","J",labvar)
labvar <- gsub("Mag","M",labvar)
labvar <- gsub("-std\\()","_std",labvar)
labvar
labvar <- gsub("-mean\\()","_mean",labvar)
labvar
labvar <- gsub("-","_",labvar)
labvar
paste0(labvar,"_TR")
ytrain[,1]<-as.factor(ytrain[,1])
actlabels[,2] <- as.factor(actlabels[,2])
levels(ytrain[,1])<-levels(actlabels[,2])
dataTrain <- data.table(activity=ytrain[,1],subjectTrain=subtrain[,1],xtrain[,ind])
dataTrain
names(dataTrain)
names(dataTrain)[3:68] <- labvar
names(dataTrain)[3:68]
labvar
head(dataTrain)
labvar
labvar <- paste0(labvar,"_TR")
ytrain[,1]<-as.factor(ytrain[,1])
actlabels[,2] <- as.factor(actlabels[,2])
levels(ytrain[,1])<-levels(actlabels[,2])
dataTrain <- data.table(activity=ytrain[,1],subjectTrain=subtrain[,1],xtrain[,ind])
names(dataTrain)[3:68] <- labvar
help('setnames')
dataTrain <- data.table(activity=ytrain[,1],subjectTrain=subtrain[,1],xtrain[,ind])
stenames(dataTrain,names(dataTrain)[3:68],labvar)
setnames(dataTrain,names(dataTrain)[3:68],labvar)
dataTrain
table(dataTrain)
tables()
dataTrain$subject
yrain
ytrain
head(ytrain)
actlabels[,2]
levels(actlabels[,2])
actlabels[,2]
levels(ytrain[,1])<-actlabels[,2]
dataTrain <- data.table(activity=ytrain[,1],subjectTrain=subtrain[,1],xtrain[,ind])
setnames(dataTrain,names(dataTrain)[3:68],labvar)
head(dataTrain)
library(dplyr)
?group_by
group_by(dataTrain,activity)
?count
tally(group_by(dataTrain,activity))
tally(tally(group_by(dataTrain,activity)))
tally(group_by(dataTrain,activity))
class(tally(group_by(dataTrain,activity)))
freq
dataTrain_G <- group_by(dataTrain,activity)
summarize(dataTrain_G,count=freq(activity))
count
?count
summarize(dataTrain_G,count=freq(as.character(activity)))
letter
letters()
letters(10)
count(c("A","A","B"))
count(dataTrain,activity)
summarize(dataTrain_G,count=count(dataTrain.activity))
summarize(dataTrain_G,count=count(dataTrain,activity))
summarize(dataTrain_G,count=count(dataTrain,activity))
summarize(dataTrain_G,count=count(activity))
dataTrain_G
?n
n(dataTrain_G)
summarize(dataTrain_G,count=n())
dataTrain_G <- group_by(dataTrain,activity) %>%
summarize(dataTrain_G,count=n())
dataTrain_G <- group_by(dataTrain,activity) %>%
summarize(count=n())
dataTrain_G
?average.mean
?average.means
??average.means
??mena.avergade
??mena.aver
??mean.aver
??mean.aver
??weigthed.mean
??mean.weigthed
??mean
dataTrain_G <- group_by(dataTrain,activity) %>%
summarise_each(funs(weighted.mean))
dataTrainG
dataTrain_G
